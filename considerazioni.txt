CONSIDERAZIONI




WORKFLOW
1- creare da zero uno script per l'ambiente (simile a quello fatto per la PPO) -> (vedi pagina tra i preferiti di firefox)
2- nella creazione delle funzioni, tener in considerazione le azioni (quali sono le nostre?) e per le osservazioni (immagini 96x96 rgb o gray)
3- fatto ciò inserire un sdf di un percorso e provare ad includerlo nell'ambiente (prova con il barca.sdf) (è una riga di codice)
4- fatto ciò provar a far muovere la macchina all'interno del percorso in modo da capire se fila tutto liscio con i comandi da tastiera
5- verificare che lo stato (ovvero le immagini ricevute dalla zed) siano coerenti e della dimensione corretta
6- copiare il modello di rete definito per il car-racingV0
7- l'ambiente utilizzato dal dagger.py è lo script car_racing.py -> capire come gestire la tastiera (expert) e la rete -> nel senso capire come switchare dall'uno all'altro come fa lo script. Il tutto dovrebbe già essere gestito con la politica pi in quanto inizialmente il controllo dell'expert è massimo mentre poi diminuisce tramite il beta.



OPTUNA
utilizzo di optuna per trovare gli hyperparametri ottimi. Questa ottimizzazione va fatta dopo aver raccolto tutti i dati per il training (quindi sul dataset finale) oppure ad ogni step prima del training in modo poi da passare i valori ottimi.

PYTROCH LIGHTNING
semplica e automatizza la procedura di training e validazione con possibilità di visualizzare i risultati su tensorboard.
possibile scale del batch size e del learning rate tramite il tuner 

 INTEGRAZIONE OPTUNA PYTORCH LIGTHNING
 ho integrato i due in modo che ci sia, sia una ricerca dei parametri ottimi, sia un training loop automatico.
 
 In questo modo dopo n_trials, vengono restituiti i parametri ottimi di:
 - learning rate
 - batch_size
 - numero di epoche
 
 Una volta ottenuta dovrà essere eseguito il training con i parametri ottimi.
 
 Quindi, si procede con il dagger e pytroch lightning online.
 
 Una volta concluse le iterazioni, si chiama optuna e si cercano i parametri ottimi per l'ultimo dataset ottenuto con la simulazione.
 
 Si fa nuovamente il training dell'ultima parte e si salva il modello.

 
 OPTUNA esegue il pruned in maniera automatica quando ritiene che il trial che sta eseguendo non è promettente (è un early stopping automatico)
 
 
 
 
 
 ## DAGGER ##
 Training eseguito con macchina a velocità costante sempre.
 Training eseguito con macchina a velocità variabile in curva.
 
 
 
 
 
 
 
 
 
 
 
 
 WORKFLOW
 
 yOLOV8: input(image zed depth image), output(coordinate x,y del centro cono bounding box)
 
 vector_coordinate: input(coordinate x,y del centro dei coni visti bounding box)
 
 immagine HSV per togliere tutto eccetto i coni
 
 birdeye; input(image_hsv), output(black/white image resize 96,84)
 
 fit_lines: pts = cv2.fillPoly(img, [pts], 255) -> definisce un poligono tramite l'insieme di punti e lo riempie
 				[pts]= (np.array(vector_coordinate])
 				img = birdeye
		

 
 
 
 
 
